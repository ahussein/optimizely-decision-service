// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package activate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ActivateClient is the client API for Activate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActivateClient interface {
	Activate(ctx context.Context, in *ActivateRequest, opts ...grpc.CallOption) (*ActivateResponse, error)
}

type activateClient struct {
	cc grpc.ClientConnInterface
}

func NewActivateClient(cc grpc.ClientConnInterface) ActivateClient {
	return &activateClient{cc}
}

func (c *activateClient) Activate(ctx context.Context, in *ActivateRequest, opts ...grpc.CallOption) (*ActivateResponse, error) {
	out := new(ActivateResponse)
	err := c.cc.Invoke(ctx, "/activate.Activate/Activate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivateServer is the server API for Activate service.
// All implementations should embed UnimplementedActivateServer
// for forward compatibility
type ActivateServer interface {
	Activate(context.Context, *ActivateRequest) (*ActivateResponse, error)
}

// UnimplementedActivateServer should be embedded to have forward compatible implementations.
type UnimplementedActivateServer struct {
}

func (UnimplementedActivateServer) Activate(context.Context, *ActivateRequest) (*ActivateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activate not implemented")
}

// UnsafeActivateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivateServer will
// result in compilation errors.
type UnsafeActivateServer interface {
	mustEmbedUnimplementedActivateServer()
}

func RegisterActivateServer(s grpc.ServiceRegistrar, srv ActivateServer) {
	s.RegisterService(&Activate_ServiceDesc, srv)
}

func _Activate_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivateServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activate.Activate/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivateServer).Activate(ctx, req.(*ActivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Activate_ServiceDesc is the grpc.ServiceDesc for Activate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Activate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "activate.Activate",
	HandlerType: (*ActivateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Activate",
			Handler:    _Activate_Activate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/activate/activate.proto",
}
